
[tower]
	#Spacing between structures
	#Range: > 1
	spacing = 28
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 8
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#forge:overworld, !#forge:water, !#forge:sandy, !#forge:snowy, !#forge:beach, !#structure_gel:snowy_spruce_forest, !minecraft:mushroom_fields, !minecraft:mushroom_field_shore"
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.7
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"

[leviathan]
	#Spacing between structures
	#Range: > 1
	spacing = 36
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 9
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#forge:sandy, !#forge:beach"
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.9
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"

[snowy_temple]
	#Spacing between structures
	#Range: > 1
	spacing = 36
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 8
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#forge:snowy, #structure_gel:snowy_spruce_forest, byg:subzero_hypogeal"
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.9
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld, minecraft:the_nether"

[bigger_dungeon]
	#Spacing between structures
	#Range: > 1
	spacing = 12
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 5
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#forge:overworld, mining_dimension:mining, !minecraft:mushroom_fields, !minecraft:mushroom_field_shore"
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.4
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld, mining_dimension:mining"

[end_ruins]
	#Spacing between structures
	#Range: > 1
	spacing = 24
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 8
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#forge:end, !byg:viscal_isles, !minecraft:small_end_islands, !minecraft:the_end"
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.8
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:the_end"

[warped_garden]
	#Spacing between structures
	#Range: > 1
	spacing = 37
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 9
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "minecraft:deep_ocean, minecraft:deep_lukewarm_ocean, minecraft:deep_cold_ocean"
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"

[soul_prison]
	#Spacing between structures
	#Range: > 1
	spacing = 25
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 7
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "minecraft:soul_sand_valley, byg:quartz_desert"
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:the_nether"

