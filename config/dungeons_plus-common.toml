
[tower]
	#Spacing between structures
	#Range: > 1
	spacing = 46
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 14
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = false
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#nether, #end, #snowy, #ocean, #beach, #river, #water, desert, desert_lakes, desert_hills, byg:dunes, byg:mojave_desert, biomesoplenty:oasis, mining_dimension:mining_biome"
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.7

[leviathan]
	#Spacing between structures
	#Range: > 1
	spacing = 35
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 12
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "desert, desert_lakes, desert_hills, byg:mojave_desert, byg:dunes"
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.8

[snowy_temple]
	#Spacing between structures
	#Range: > 1
	spacing = 35
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 12
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#snowy, #icy"
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.8

[bigger_dungeon]
	#Spacing between structures
	#Range: > 1
	spacing = 15
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 5
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#overworld, !mushroom_fields, !mushroom_field_shore"
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.8

[end_ruins]
	#Spacing between structures
	#Range: > 1
	spacing = 25
	#Offsets the spacing of the structures randomly
	#Range: > 0
	offset = 12
	#How should the code treate biomes? true = whitelist, false = blacklist. Biomes defined with ! do the opposite.
	is_whitelist = true
	#A biome filter to determine where the structure should generate. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "end_highlands, end_midlands, byg:ivis_fields, endergetic:chorus_plains, endergetic:end_highlands, endergetic:end_midlands, endergetic:poise_forest"
	#Chance of generating in an allowed chunk
	#Range: 0.0 ~ 1.0
	probability = 0.8

